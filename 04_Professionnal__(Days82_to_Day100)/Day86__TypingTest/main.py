import tkinter as tk
from tkinter import ttk
import time
import random

PHRASES = [
    "Un algorithme est une suite d'instructions pour r√©soudre un probl√®me.",
    "La m√©moire RAM permet de stocker des donn√©es temporairement.",
    "L'adresse IP identifie un appareil sur un r√©seau.",
    "Python est un langage interpr√©t√© et multi-paradigme.",
    "Un bug est une erreur dans un programme informatique.",
    "Git est un syst√®me de gestion de versions d√©centralis√©.",
    "Une API permet la communication entre deux logiciels.",
    "Linux est un syst√®me d'exploitation libre et open-source.",
    "La compilation transforme du code source en code machine.",
    "Un serveur web fournit des pages web aux clients.",
    "Un conteneur Docker isole une application et ses d√©pendances.",
    "L'UDP est un protocole r√©seau sans v√©rification de r√©ception.",
    "HTTPS chiffre les √©changes entre client et serveur.",
    "Le HTML structure le contenu d'une page web.",
    "Le CSS permet de styliser les √©l√©ments HTML.",
    "Une fonction est un bloc de code r√©utilisable.",
    "Un tableau est une structure de donn√©es index√©e.",
    "La complexit√© algorithmique mesure la performance d'un algorithme.",
    "Un firewall filtre le trafic r√©seau entrant et sortant.",
    "Un hash est une empreinte unique d'une donn√©e.",
    "L'encapsulation est un principe fondamental de la POO.",
    "Un thread permet l'ex√©cution parall√®le de t√¢ches.",
    "Une base de donn√©es stocke et organise les donn√©es.",
    "SQL est un langage pour manipuler des bases de donn√©es.",
    "L'injection SQL est une faille de s√©curit√© critique.",
    "La boucle for est utilis√©e pour r√©p√©ter des actions.",
    "Une classe est un mod√®le pour cr√©er des objets.",
    "Un syst√®me binaire est bas√© sur les chiffres 0 et 1.",
    "SSH permet d'acc√©der √† un serveur √† distance en toute s√©curit√©.",
    "Le protocole TCP assure une transmission fiable des donn√©es.",
    "L'open source permet la consultation et la modification du code.",
    "JSON est un format l√©ger d'√©change de donn√©es.",
    "Un IDE est un environnement de d√©veloppement int√©gr√©.",
    "Les permissions contr√¥lent l'acc√®s aux fichiers sous Linux.",
    "Le chiffrement prot√®ge les donn√©es contre les acc√®s non autoris√©s.",
    "L'intelligence artificielle simule des comportements humains.",
    "Une boucle infinie peut bloquer un programme.",
    "Un commit enregistre des modifications dans un d√©p√¥t Git.",
    "Un r√©seau local relie plusieurs machines dans une zone restreinte.",
    "La virtualisation permet d'ex√©cuter plusieurs OS sur une seule machine.",
    "Un protocole r√©seau d√©finit les r√®gles de communication.",
    "Un DNS traduit un nom de domaine en adresse IP.",
    "Le cloud computing permet d'utiliser des ressources √† distance.",
    "Un token d‚Äôauthentification v√©rifie l‚Äôidentit√© d‚Äôun utilisateur.",
    "Un op√©rateur logique permet de combiner des conditions.",
    "Un framework acc√©l√®re le d√©veloppement logiciel.",
    "Le kernel est le c≈ìur du syst√®me d‚Äôexploitation.",
    "La r√©cursivit√© est une fonction qui s'appelle elle-m√™me.",
    "Un pointeur contient l'adresse d'une variable.",
    "Le garbage collector lib√®re automatiquement la m√©moire inutilis√©e."
]

class TypingTestApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Test de Vitesse de Frappe")
        self.root.geometry("600x400")
        self.root.resizable(False, False)

        self.style = ttk.Style()
        self.style.configure("TButton", font=("Arial", 10))
        self.style.configure("TLabel", font=("Arial", 11))
        self.style.configure("TEntry", font=("Arial", 11))

        self.start_time = None
        self.best_wpm = 0
        self.running = False
        self.phrase = random.choice(PHRASES)

        self.frame = ttk.Frame(root, padding=20)
        self.frame.pack(expand=True)

        self.label_text = ttk.Label(self.frame, text=self.phrase, wraplength=560, font=("Arial", 12, "italic"))
        self.label_text.pack(pady=(0, 10))

        self.entry = tk.Text(self.frame, height=4, width=70, font=("Arial", 12), wrap="word")
        self.entry.pack(pady=5)
        self.entry.bind("<KeyPress>", self.start_timer)

        self.timer_label = ttk.Label(self.frame, text="Temps : 0.0s")
        self.timer_label.pack(pady=(10, 0))

        self.result = ttk.Label(self.frame, text="", font=("Arial", 12, "bold"))
        self.result.pack(pady=5)

        self.best_label = ttk.Label(self.frame, text="üèÜ Meilleur score : 0 WPM")
        self.best_label.pack(pady=(0, 15))

        self.button = ttk.Button(self.frame, text="Recommencer", command=self.reset)
        self.button.pack()

    def start_timer(self, event):
        if not self.running:
            self.start_time = time.time()
            self.running = True
            self.update_timer()
            self.check_typing()

    def update_timer(self):
        if self.running:
            elapsed = time.time() - self.start_time
            self.timer_label.config(text=f"Temps : {elapsed:.1f}s")
            self.root.after(100, self.update_timer)

    def check_typing(self):
        if not self.running:
            return

        typed = self.entry.get("1.0", tk.END).strip()
        if typed == self.phrase:
            self.running = False
            elapsed = time.time() - self.start_time
            wpm = round(len(self.phrase.split()) / (elapsed / 60))
            self.result.config(text=f"‚úÖ Termin√© ! Vitesse : {wpm} mots/minute.")
            if wpm > self.best_wpm:
                self.best_wpm = wpm
                self.best_label.config(text=f"üèÜ Meilleur score : {self.best_wpm} WPM")
        else:
            self.root.after(100, self.check_typing)

    def reset(self):
        self.running = False
        self.start_time = None
        self.phrase = random.choice(PHRASES)
        self.label_text.config(text=self.phrase)
        self.entry.delete("1.0", tk.END)
        self.result.config(text="")
        self.timer_label.config(text="Temps : 0.0s")

if __name__ == "__main__":
    root = tk.Tk()
    app = TypingTestApp(root)
    root.mainloop()
